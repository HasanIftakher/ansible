---
- name: Create Linux VM in Azure
  # Host is local as the Azure module runs from the Ansible control node.
  hosts: localhost
  connection: local
  # No need to gather facts
  gather_facts: false
  vars:
    vm_name: "tower"
    vm2_name: "managedhost"
    res_group: "rgAnsibleLab"
    res_group_location: canadacentral
    storage_class: Standard_LRS
    virtual_network_cidr: 10.0.0.0/24
    default_username: "ansible"
    default_password: "Password1!"
    centos_vm_size: Standard_D2_v3
    centos_ip_address: "10.0.0.10"
    centos_ip_address2: "10.0.0.11"
    
    azure_client_id: "{{ lookup('env', 'AZURE_CLIENT_ID')}}"
    azure_tenant: "{{ lookup('env', 'AZURE_TENANT')}}"
    azure_subscription_id: "{{ lookup('env', 'AZURE_SUBSCRIPTION_ID')}}"
    azure_secret: "{{ lookup('env', 'AZURE_SECRET')}}"

  #
  # You can do pre-tasks that will execute before roles or tasks, post tasks are also available.
  #

  pre_tasks:
    - name: Validate that we have a vm_name
      assert:
          that: vm_name is defined
          msg: You need to pass vm_name as an extra parameter to execute this playbook

    - name: Do we have our AZURE Credentials
      assert:
        { that: "{{ item}} != ''" }
      with_items:
        - azure_client_id
        - azure_tenant
        - azure_subscription_id
        - azure_secret 

  tasks:
  #
  # Generic tasks to start a VM
  #

    - name: Create resource group 
      azure_rm_resourcegroup:
        client_id: "{{ azure_client_id }}"
        tenant: "{{ azure_tenant }}"
        subscription_id: "{{ azure_subscription_id }}"
        secret: "{{ azure_secret }}"
        name: "{{ res_group }}"
        location: "{{ res_group_location }}"

    - name: Create storage account
      azure_rm_storageaccount:
        client_id: "{{ azure_client_id }}"
        tenant: "{{ azure_tenant }}"
        subscription_id: "{{ azure_subscription_id }}"
        secret: "{{ azure_secret }}"
        resource_group: "{{ res_group }}"
        name: "lrs{{ vm_name }}"
        account_type: "{{ storage_class }}"

    - name: Create virtual network
      azure_rm_virtualnetwork:
        client_id: "{{ azure_client_id }}"
        tenant: "{{ azure_tenant }}"
        subscription_id: "{{ azure_subscription_id }}"
        secret: "{{ azure_secret }}"
        resource_group: "{{ res_group }}"
        name: "vn{{ vm_name }}"
        address_prefixes: "{{virtual_network_cidr}}"

    - name: Add subnet
      azure_rm_subnet:
        client_id: "{{ azure_client_id }}"
        tenant: "{{ azure_tenant }}"
        subscription_id: "{{ azure_subscription_id }}"
        secret: "{{ azure_secret }}"
        resource_group: "{{ res_group }}"
        name: "sn{{ vm_name }}"
        address_prefix: "{{virtual_network_cidr}}"
        virtual_network: "vn{{ vm_name }}"

    - name: Create first public ip for Tower VM
      azure_rm_publicipaddress:
        client_id: "{{ azure_client_id }}"
        tenant: "{{ azure_tenant }}"
        subscription_id: "{{ azure_subscription_id }}"
        secret: "{{ azure_secret }}"
        resource_group: "{{ res_group }}"
        allocation_method: Static
        name: "pbi01{{ vm_name }}"

    - name: Create second public ip for Managed Host VM
      azure_rm_publicipaddress:
        client_id: "{{ azure_client_id }}"
        tenant: "{{ azure_tenant }}"
        subscription_id: "{{ azure_subscription_id }}"
        secret: "{{ azure_secret }}"
        resource_group: "{{ res_group }}"
        allocation_method: Static
        name: "pbi02{{ vm2_name }}"

    - name: Create security group that allows incoming traffic on SSH/HTTP/HTTPS
      azure_rm_securitygroup:
        client_id: "{{ azure_client_id }}"
        tenant: "{{ azure_tenant }}"
        subscription_id: "{{ azure_subscription_id }}"
        secret: "{{ azure_secret }}"
        resource_group: "{{ res_group }}"
        name: "sg{{vm_name}}"
        rules:
          - name: SSH
            protocol: Tcp
            destination_port_range: 22
            access: Allow
            priority: 101
            direction: Inbound
          - name: HTTP
            protocol: Tcp
            destination_port_range: 80
            access: Allow
            priority: 103
            direction: Inbound
          - name: HTTPS
            protocol: Tcp
            destination_port_range: 443
            access: Allow
            priority: 104
            direction: Inbound
          - name: Custom
            protocol: Tcp
            destination_port_range: 8080
            access: Allow
            priority: 105
            direction: Inbound

    - name: Create NIC for Tower VM
      azure_rm_networkinterface:
        client_id: "{{ azure_client_id }}"
        tenant: "{{ azure_tenant }}"
        subscription_id: "{{ azure_subscription_id }}"
        secret: "{{ azure_secret }}"
        resource_group: "{{ res_group }}"
        name: "nic01{{ vm_name }}"
        virtual_network: "vn{{ vm_name }}"
        subnet: "sn{{ vm_name }}"
        ip_configurations:
        - name: "primary"
          public_ip_name: "pbi01{{ vm_name }}"
          private_ip_address: "{{ centos_ip_address }}"
          private_ip_allocation_method: "Static"
          primary: "yes"
        security_group: "sg{{ vm_name }}"

    - name: Create NIC for Managed Node VM
      azure_rm_networkinterface:
        client_id: "{{ azure_client_id }}"
        tenant: "{{ azure_tenant }}"
        subscription_id: "{{ azure_subscription_id }}"
        secret: "{{ azure_secret }}"
        resource_group: "{{ res_group }}"
        name: "nic01{{ vm2_name }}"
        virtual_network: "vn{{ vm_name }}"
        subnet: "sn{{ vm_name }}"
        ip_configurations:
        - name: "primary"
          public_ip_name: "pbi02{{ vm_name }}"
          private_ip_address: "{{ centos_ip_address2 }}"
          private_ip_allocation_method: "Static"
          primary: "yes"
        security_group: "sg{{ vm_name }}"

    - name: Create Tower VM
      azure_rm_virtualmachine:
        client_id: "{{ azure_client_id }}"
        tenant: "{{ azure_tenant }}"
        subscription_id: "{{ azure_subscription_id }}"
        secret: "{{ azure_secret }}"
        resource_group: "{{ res_group }}"
        name: "centos{{ vm_name }}"
        vm_size: "{{ centos_vm_size }}"
        managed_disk_type: "{{ storage_class }}"
        storage_account: "lrs{{ vm_name }}"
        storage_container: "vms{{vm_name}}"
        storage_blob: "centos{{vm_name}}.vhd"
        admin_username: "{{ default_username }}"
        admin_password: "{{ default_password }}"
        network_interfaces: "nic01{{vm_name}}"
        image:
          offer: Centos
          publisher: OpenLogic
          sku: '7.4'
          version: latest
        ssh_public_keys:
          - path: /home/{{ default_username }}/.ssh/authorized_keys
            key_data: "{{ lookup('file', 'insecure.pub') }}"       

    - name: Create Managed Host VM
      azure_rm_virtualmachine:
        client_id: "{{ azure_client_id }}"
        tenant: "{{ azure_tenant }}"
        subscription_id: "{{ azure_subscription_id }}"
        secret: "{{ azure_secret }}"
        resource_group: "{{ res_group }}"
        name: "centos{{ vm2_name }}"
        vm_size: "{{ centos_vm_size }}"
        managed_disk_type: "{{ storage_class }}"
        storage_account: "lrs{{ vm_name }}"
        storage_container: "vms{{vm_name}}"
        storage_blob: "centos{{vm2_name}}.vhd"
        admin_username: "{{ default_username }}"
        admin_password: "{{ default_password }}"
        network_interfaces: "nic01{{vm2_name}}"
        image:
          offer: Centos
          publisher: OpenLogic
          sku: '7.4'
          version: latest
        ssh_public_keys:
          - path: /home/{{ default_username }}/.ssh/authorized_keys
            key_data: "{{ lookup('file', 'insecure.pub') }}"       

    - name: Add Tower host to dynamic inventory
      add_host:
        name: "tower"
        ansible_host: "{{ centos_ip_address }}"
        ansible_user: "{{ default_username }}"
        ansible_ssh_pass: "{{ default_password }}"
        ansible_sudo_pass: "{{ default_password }}"
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'

    - name: Prepare the Tower host
      become: true
      block:
        - wait_for:
            port: 22
            timeout: 3000
        - file:
            path: "/home/{{ username }}/labs"
            state: "directory"
            owner: "{{ username }}"
            mode: 0755
            group: "{{ username }}"
        - template:
            dest: "/etc/sudoers.d/waagent" 
            src: "waagent.j2" 
            mode: 0600
            owner: root 
            group: root    
        - get_url:
            dest: /var/tmp 
            url: "{{ ansible_tower_release_url }}" 
          register: get_tower
        - unarchive:
            dest: /var/tmp/ 
            src: "/var/tmp/{{ ansible_tower_archive }}" 
            remote_src: yes 
          when: get_tower.changed
        - replace:
            path: "/var/tmp/{{ ansible_tower_basename }}-{{ ansible_tower_version }}/inventory" 
            regexp: "^(.*)_password=''" 
            replace: "\\1_password='ansible'"
          when: get_tower.changed
        - command: "/var/tmp/{{ ansible_tower_basename }}-{{ ansible_tower_version }}/setup.sh"
          when: get_tower.changed or ansible_tower_install != false 
        - yum: 
            name: [python2-pip, python2-winrm, python2-requests]  
            state: installed
      delegate_to: tower 

