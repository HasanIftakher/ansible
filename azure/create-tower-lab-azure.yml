---
- name: Create Linux VM in Azure
  # Host is local as the Azure module runs from the Ansible control node.
  hosts: localhost
  connection: local
  # No need to gather facts
  gather_facts: false
  vars:
    # Variables to create the Tower VM and App Server VM
    default_username: "ansible"
    default_password: "Password1!"
    vm1_name: "tower"
    vm2_name: "appserver"
    vm3_name: "workshop"
    vm1_ip_address: "10.0.0.10"
    vm2_ip_address: "10.0.0.11"
    vm3_ip_address: "10.0.0.12"
    vm_size: Standard_D2_v3
    res_group: "rgAnsibleLab"
    res_group_location: canadacentral
    storage_class: Standard_LRS
    virtual_network_cidr: 10.0.0.0/24
    ansible_tower_install: true
    ansible_tower_basename: "ansible-tower-setup"
    #ansible_tower_version: "3.4.3-1"
    ansible_tower_version: "3.5.1-1"
    ansible_tower_archive: "{{ ansible_tower_basename }}-{{ ansible_tower_version }}.tar.gz"
    ansible_tower_release_url: "http://releases.ansible.com/ansible-tower/setup/{{ ansible_tower_archive }}"
    epel_repo_url: "https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm"
    epel_repo_gpg_key_url: "/etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7"
    epel_repofile_path: "/etc/yum.repos.d/epel.repo"

    # Azure credentials stored in BASH environment variables. Query them and store for use
    azure_client_id: "{{ lookup('env', 'AZURE_CLIENT_ID') }}"
    azure_tenant: "{{ lookup('env', 'AZURE_TENANT') }}"
    azure_subscription_id: "{{ lookup('env', 'AZURE_SUBSCRIPTION_ID') }}"
    azure_secret: "{{ lookup('env', 'AZURE_SECRET') }}"

    # Fetch ubscription-manager credentials
    subs_mgr_username: "{{ lookup('env', 'SMUSERNAME') }}"
    subs_mgr_password: "{{ lookup('env', 'SMPASSWORD') }}"

    # Later on in this playbook, I use a RHEL7.6 golden image to create the two VMs:
    #
    #         image:
    #          name: rhel7-golden-image.vhd
    #          resource_group: rgDefault
    # 
    # How I prepared this image, and how I uploaded it to Azure for use is here:
    #
    # https://access.redhat.com/articles/uploading-rhel-image-to-azure


  #
  # You can do pre-tasks that will execute before roles or tasks, post tasks are also available.
  #

  pre_tasks:
    - name: Validate VM details are defined (user to verify if they are sane)
      assert:
        { that: "{{ item }} is defined" }
      with_items:
        - default_username
        - default_password
        - vm1_name
        - vm2_name
        - vm1_ip_address
        - vm2_ip_address
        - vm_size

    - name: Do we have our AZURE/Red Hat Credentials
      assert:
        { that: "{{ item }} != ''" }
      with_items:
        - azure_client_id
        - azure_tenant
        - azure_subscription_id
        - azure_secret
        - subs_mgr_username
        - subs_mgr_password

  tasks:
  #
  # Generic tasks to create and then start a VM
  #

    - name: Create resource group
      azure_rm_resourcegroup:
        client_id: "{{ azure_client_id }}"
        tenant: "{{ azure_tenant }}"
        subscription_id: "{{ azure_subscription_id }}"
        secret: "{{ azure_secret }}"
        name: "{{ res_group }}"
        location: "{{ res_group_location }}"

    - name: Create storage account
      azure_rm_storageaccount:
        client_id: "{{ azure_client_id }}"
        tenant: "{{ azure_tenant }}"
        subscription_id: "{{ azure_subscription_id }}"
        secret: "{{ azure_secret }}"
        resource_group: "{{ res_group }}"
        name: "sac{{ vm1_name }}"
        account_type: "{{ storage_class }}"

    - name: Create virtual network
      azure_rm_virtualnetwork:
        client_id: "{{ azure_client_id }}"
        tenant: "{{ azure_tenant }}"
        subscription_id: "{{ azure_subscription_id }}"
        secret: "{{ azure_secret }}"
        resource_group: "{{ res_group }}"
        name: "vn{{ vm1_name }}"
        address_prefixes: "{{ virtual_network_cidr }}"

    - name: Add subnet
      azure_rm_subnet:
        client_id: "{{ azure_client_id }}"
        tenant: "{{ azure_tenant }}"
        subscription_id: "{{ azure_subscription_id }}"
        secret: "{{ azure_secret }}"
        resource_group: "{{ res_group }}"
        name: "sn{{ vm1_name }}"
        address_prefix: "{{ virtual_network_cidr }}"
        virtual_network: "vn{{ vm1_name }}"

    - name: Create first public ip for Tower VM
      azure_rm_publicipaddress:
        client_id: "{{ azure_client_id }}"
        tenant: "{{ azure_tenant }}"
        subscription_id: "{{ azure_subscription_id }}"
        secret: "{{ azure_secret }}"
        resource_group: "{{ res_group }}"
        allocation_method: Static
        name: "pbi01{{ vm1_name }}"
        #      async: 300
        #      poll: 0
        #      register: pbi01_results

    - name: Create second public ip for Managed Host VM
      azure_rm_publicipaddress:
        client_id: "{{ azure_client_id }}"
        tenant: "{{ azure_tenant }}"
        subscription_id: "{{ azure_subscription_id }}"
        secret: "{{ azure_secret }}"
        resource_group: "{{ res_group }}"
        allocation_method: Static
        name: "pbi02{{ vm2_name }}"
        #      async: 300
        #      poll: 0
        #      register: pbi02_results

    - name: Create third public ip for Workshop VM
      azure_rm_publicipaddress:
        client_id: "{{ azure_client_id }}"
        tenant: "{{ azure_tenant }}"
        subscription_id: "{{ azure_subscription_id }}"
        secret: "{{ azure_secret }}"
        resource_group: "{{ res_group }}"
        allocation_method: Static
        name: "pbi03{{ vm3_name }}"
        #      async: 300
        #      poll: 0
        #      register: pbi03_results

    - name: Create security group that allows incoming traffic on SSH/HTTP/HTTPS
      azure_rm_securitygroup:
        client_id: "{{ azure_client_id }}"
        tenant: "{{ azure_tenant }}"
        subscription_id: "{{ azure_subscription_id }}"
        secret: "{{ azure_secret }}"
        resource_group: "{{ res_group }}"
        name: "sg{{ vm1_name }}"
        rules:
          - name: SSH
            protocol: Tcp
            destination_port_range: 22
            access: Allow
            priority: 101
            direction: Inbound
          - name: HTTP
            protocol: Tcp
            destination_port_range: 80
            access: Allow
            priority: 103
            direction: Inbound
          - name: HTTPS
            protocol: Tcp
            destination_port_range: 443
            access: Allow
            priority: 104
            direction: Inbound
          - name: Custom
            protocol: Tcp
            destination_port_range: 8080
            access: Allow
            priority: 105
            direction: Inbound
            #      async: 300
            #      poll: 0
            #      register: sg01_results

    - name: Create NIC for Tower VM
      azure_rm_networkinterface:
        client_id: "{{ azure_client_id }}"
        tenant: "{{ azure_tenant }}"
        subscription_id: "{{ azure_subscription_id }}"
        secret: "{{ azure_secret }}"
        resource_group: "{{ res_group }}"
        name: "nic01{{ vm1_name }}"
        virtual_network: "vn{{ vm1_name }}"
        subnet: "sn{{ vm1_name }}"
        ip_configurations:
        - name: "primary"
          public_ip_name: "pbi01{{ vm1_name }}"
          private_ip_address: "{{ vm1_ip_address }}"
          private_ip_allocation_method: "Static"
          primary: "yes"
        security_group: "sg{{ vm1_name }}"
        #      async: 300
        #      poll: 0
        #      register: nic01_results

    - name: Create NIC for Managed Node VM
      azure_rm_networkinterface:
        client_id: "{{ azure_client_id }}"
        tenant: "{{ azure_tenant }}"
        subscription_id: "{{ azure_subscription_id }}"
        secret: "{{ azure_secret }}"
        resource_group: "{{ res_group }}"
        name: "nic01{{ vm2_name }}"
        virtual_network: "vn{{ vm1_name }}"
        subnet: "sn{{ vm1_name }}"
        ip_configurations:
        - name: "primary"
          public_ip_name: "pbi02{{ vm2_name }}"
          private_ip_address: "{{ vm2_ip_address }}"
          private_ip_allocation_method: "Static"
          primary: "yes"
        security_group: "sg{{ vm1_name }}"
        #      async: 300
        #      poll: 0
        #      register: nic02_results

    - name: Create NIC for Workshop VM
      azure_rm_networkinterface:
        client_id: "{{ azure_client_id }}"
        tenant: "{{ azure_tenant }}"
        subscription_id: "{{ azure_subscription_id }}"
        secret: "{{ azure_secret }}"
        resource_group: "{{ res_group }}"
        name: "nic01{{ vm3_name }}"
        virtual_network: "vn{{ vm1_name }}"
        subnet: "sn{{ vm1_name }}"
        ip_configurations:
        - name: "primary"
          public_ip_name: "pbi03{{ vm3_name }}"
          private_ip_address: "{{ vm3_ip_address }}"
          private_ip_allocation_method: "Static"
          primary: "yes"
        security_group: "sg{{ vm1_name }}"
        #      async: 300
        #      poll: 0
        #      register: nic03_results

    - name: Create Tower VM
      azure_rm_virtualmachine:
        client_id: "{{ azure_client_id }}"
        tenant: "{{ azure_tenant }}"
        subscription_id: "{{ azure_subscription_id }}"
        secret: "{{ azure_secret }}"
        resource_group: "{{ res_group }}"
        name: "rhel{{ vm1_name }}"
        vm_size: "{{ vm_size }}"
        managed_disk_type: "{{ storage_class }}"
        storage_account: "sac{{ vm1_name }}"
        storage_container: "vms{{ vm1_name }}"
        storage_blob: "rhel{{ vm1_name }}.vhd"
        admin_username: "{{ default_username }}"
        admin_password: "{{ default_password }}"
        network_interfaces: "nic01{{ vm1_name }}"
        image:
          name: rhel7-golden-image.vhd
          resource_group: rgDefault
        ssh_public_keys:
          - path: /home/{{ default_username }}/.ssh/authorized_keys
            key_data: "{{ lookup('file', 'insecure.pub') }}"
      register: vm1_output
#      async: 300
#      poll: 0

    - name: Create Application Server VM
      azure_rm_virtualmachine:
        client_id: "{{ azure_client_id }}"
        tenant: "{{ azure_tenant }}"
        subscription_id: "{{ azure_subscription_id }}"
        secret: "{{ azure_secret }}"
        resource_group: "{{ res_group }}"
        name: "rhel{{ vm2_name }}"
        vm_size: "{{ vm_size }}"
        managed_disk_type: "{{ storage_class }}"
        storage_account: "sac{{ vm1_name }}"
        storage_container: "vms{{ vm1_name }}"
        storage_blob: "rhel{{ vm2_name }}.vhd"
        admin_username: "{{ default_username }}"
        admin_password: "{{ default_password }}"
        network_interfaces: "nic01{{ vm2_name }}"
        image:
          name: rhel7-golden-image.vhd
          resource_group: rgDefault
        ssh_public_keys:
          - path: /home/{{ default_username }}/.ssh/authorized_keys
            key_data: "{{ lookup('file', 'insecure.pub') }}"
      register: vm2_output
            #      async: 300
            #      poll: 0

    - name: Create Workshop VM
      azure_rm_virtualmachine:
        client_id: "{{ azure_client_id }}"
        tenant: "{{ azure_tenant }}"
        subscription_id: "{{ azure_subscription_id }}"
        secret: "{{ azure_secret }}"
        resource_group: "{{ res_group }}"
        name: "rhel{{ vm3_name }}"
        vm_size: "{{ vm_size }}"
        managed_disk_type: "{{ storage_class }}"
        storage_account: "sac{{ vm1_name }}"
        storage_container: "vms{{ vm1_name }}"
        storage_blob: "rhel{{ vm3_name }}.vhd"
        admin_username: "{{ default_username }}"
        admin_password: "{{ default_password }}"
        network_interfaces: "nic01{{ vm3_name }}"
        image:
          name: rhel8-golden-image.vhd
          resource_group: rgDefault
        ssh_public_keys:
          - path: /home/{{ default_username }}/.ssh/authorized_keys
            key_data: "{{ lookup('file', 'insecure.pub') }}"
      register: vm3_output
            #      async: 300
            #      poll: 0

#    - name: Wait for VMs to be completed
#      async_status:
#        jid: "{{ item.ansible_job_id }}"
#      register: job_result
#      with_items:
#        - "{{ pbi01_results }}"
#        - "{{ pbi02_results }}"
#        - "{{ pbi03_results }}"
#        - "{{ nic01_results }}"
#        - "{{ nic02_results }}"
#        - "{{ nic03_results }}"
#        - "{{ sg01_results }}"
#        - "{{ vm1_output }}"
#        - "{{ vm2_output }}"
#        - "{{ vm3_output }}"
#      until: job_result.finished
#      retries: 60

    - name: Add Tower VM to dynamic inventory
      add_host:
        name: "tower"
        ansible_host: "{{ vm1_output.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.publicIPAddress.properties.ipAddress }}"
        ansible_user: "{{ default_username }}"
        ansible_password: "{{ default_password }}"
        ansible_sudo_password: "{{ default_password }}"
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'

    - name: Add Workshop VM to dynamic inventory
      add_host:
        name: "workshop"
        ansible_host: "{{ vm3_output.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.publicIPAddress.properties.ipAddress }}"
        ansible_user: "{{ default_username }}"
        ansible_password: "{{ default_password }}"
        ansible_sudo_password: "{{ default_password }}"
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'

    - name: Prepare the Tower host
      become: true
      block:
        - name: Wait for host to become available via SSH
          wait_for:
            port: 22
            timeout: 3000

        - name: Place sudoers entry for waagent
          template:
            dest: "/etc/sudoers.d/waagent"
            src: "templates/waagent.j2"
            mode: 0600
            owner: root
            group: root

        - name: Register host with subscription-manager
          redhat_subscription:
            state: present
            username: "{{ subs_mgr_username }}"
            password: "{{ subs_mgr_password }}"
            auto_attach: true

        - name: Enable Red Hat yum repositories
          rhsm_repository:
            name: "{{ item }}"
            state: enabled
          with_items:
            - rhel-7-server-rpms
            - rhel-7-server-optional-rpms
            - rhel-7-server-extras-rpms
            - rhel-7-server-rh-common-rpms
            - rhel-7-server-ansible-2.7-rpms

        - name: Check if EPEL repo is already configured.
          stat: path={{ epel_repofile_path }}
          register: epel_repofile_result

        - name: Install EPEL repo.
          yum:
            name: "{{ epel_repo_url }}"
            state: present
          register: result
          until: 'result.rc == 0'
          retries: 5
          delay: 10
          when: not epel_repofile_result.stat.exists

        - name: Import EPEL GPG key.
          rpm_key:
            key: "{{ epel_repo_gpg_key_url }}"
            state: present
          when: not epel_repofile_result.stat.exists
          ignore_errors: "{{ ansible_check_mode }}"

        - name: Install python components to Tower host
          yum:
            name: [python2-pip, python2-winrm, python2-requests, libselinux-python, ansible, python2-ansible-tower-cli]
            state: installed

        - name: Download Ansible Tower release
          get_url:
            dest: /var/tmp
            url: "{{ ansible_tower_release_url }}"
          register: get_tower

        - name: Extract Ansible Tower release archive
          unarchive:
            dest: /var/tmp/
            src: "/var/tmp/{{ ansible_tower_archive }}"
            remote_src: yes
          when: get_tower.changed

        - name: Change default Ansible Tower admin password
          replace:
            path: "/var/tmp/{{ ansible_tower_basename }}-{{ ansible_tower_version }}/inventory"
            regexp: "^(.*)_password=''"
            replace: "\\1_password='ansible'"
          when: get_tower.changed

        - name: Install Ansible Tower
          command: "/var/tmp/{{ ansible_tower_basename }}-{{ ansible_tower_version }}/setup.sh"
          async: 1200
          poll: 30
          when: get_tower.changed or ansible_tower_install != false
      delegate_to: tower

    - name: Add Tower license to Tower VM
      uri:
        url: https://{{ vm1_output.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.publicIPAddress.properties.ipAddress }}/api/v2/config/
        method: POST
        validate_certs: no
        headers:
          Content-Type: "application/json"
          Accept: "application/json"
        force_basic_auth: yes
        user: admin
        password: ansible
        body: '{{ lookup("file", "/home/aludwar/.azure/license.txt") }}'
        body_format: json

    - name: Populate Ansible Tower contents
      become: true
      block:
        - name: Create tower organization
          tower_organization:
            name: "Red Hat"
            description: "Azure demo inventory"
            state: present
            tower_host: https://{{ vm1_output.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.publicIPAddress.properties.ipAddress }}
            tower_username: admin
            tower_password: ansible

        - name: Create tower inventory
          tower_inventory:
            name: "Red Hat Inventory"
            description: "Azure inventory"
            organization: "Red Hat"
            state: present
            tower_host: https://{{ vm1_output.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.publicIPAddress.properties.ipAddress }}
            tower_username: admin
            tower_password: ansible

        - name: Add app server to inventory
          tower_host:
            name: "{{ vm2_output.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.publicIPAddress.properties.ipAddress }}"
            inventory: "Red Hat Inventory"
            state: present
            tower_host: https://{{ vm1_output.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.publicIPAddress.properties.ipAddress }}
            tower_username: admin
            tower_password: ansible
      delegate_to: tower

    - name: Create DNS A records for the environment
      azure_rm_dnsrecordset:
        resource_group: rgDefault
        zone_name: azure.ludwar.ca
        state: present
        relative_name: "{{ item.name }}"
        record_type: "{{ item.type }}"
        records: "{{ item.records }}"
      with_items:
        - { name: 'tower', type: 'A', records: [ { entry: "{{ vm1_output.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.publicIPAddress.properties.ipAddress }}" } ] }
        - { name: 'workshop', type: 'A', records: [ { entry: "{{ vm3_output.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.publicIPAddress.properties.ipAddress }}" } ] }

    - name: Display created VM info
      debug:
        msg: "Azure Ansible Lab

         Tower url is https://{{ vm1_output.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.publicIPAddress.properties.ipAddress }}/

         Managed host is {{ vm2_output.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.publicIPAddress.properties.ipAddress }}/

         Workshop host is {{ vm3_output.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.publicIPAddress.properties.ipAddress }}/"

# This isn't working quite yet
#
#- name: Deploy services on workshop VM
#  import_playbook: create-workstation-vm.yml
